on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
name: make release
jobs:
  build:
    name: make release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}
      - name: make release
        uses: docker://rust:latest
        with:
          entrypoint: cargo
          args: build --release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Below are instructions for downloading and installing this release:

            ```
            # Export the sha256sum for verification.
            $ export CONFIGS_SHA256="$(curl -sSL https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/configs.sha256)"

            # Download and check the sha256sum.
            $ curl -fSL "https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/configs" -o "/usr/local/bin/configs" \
	              && echo "${CONFIGS_SHA256}  /usr/local/bin/configs" | sha256sum -c - \
	              && chmod a+x "/usr/local/bin/configs"

            $ echo "configs installed!"

            # Run it!
            $ configs -h
            ```
          draft: true
          prerelease: false
      - name: Upload the release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: target/release/configs
          asset_name: configs
          asset_content_type: application/octet-stream
      - name: Upload the release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: target/release/configs.md5
          asset_name: configs.md5
          asset_content_type: text/plain
      - name: Upload the release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: target/release/configs.sha256
          asset_name: configs.sha256
          asset_content_type: text/plain
